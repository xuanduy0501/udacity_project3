version: 2.1

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy environments
          command: |
            echo "Destroying environment: << parameters.id >> "
            aws s3 rm "s3://udapeople-<< parameters.id >>" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.id >>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.id >>"
          when: << parameters.when >>

  revert-migrations:
    description: Revert migrations
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          command: |
            SUCCESS=$(curl https://kvdb.io/M8NTh9kT327fA6ombuZZS/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if [ "$SUCCESS" == "success" ];
            then
              echo "------------------ Confirm to revert -------------" 
              cd ~/project/backend
              npm install
              npm run migrations:revert
            else
              echo "--------------- No migrations to revert ----------"  
            fi
          when: << parameters.when >>

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Save all db varibles in env file
          command: |
            cd backend
            touch .env
            echo NODE_ENV=local >> .env
            echo TYPEORM_HOST=database-2.cicvv8ubmjyc.us-east-1.rds.amazonaws.com >> .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_DATABASE=postgres >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_PASSWORD=password >> .env
            echo TYPEORM_PORT=5432 >> .env
            TYPEORM_USERNAME=postgres >> .env
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir --parents /home/circleci/source
            cp artifact.tar.gz /home/circleci/source/
            cd /home/circleci/source/
            ls -la
      - persist_to_workspace:
          root: .
          paths:
            - artifact.tar.gz
            - .circleci/ansible/inventory.txt
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]