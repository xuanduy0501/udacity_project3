version: 2.1

commands:
  destroy-environment:
    description: Destroy be and fe clfm stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy environments
          command: |
            echo "Destroying environment: << parameters.id >> "
            aws s3 rm "s3://udapeople-<< parameters.id >>" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.id >>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.id >>"
          when: << parameters.when >>

  revert-migrations:
    description: Revert migrations
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          command: |
            SUCCESS=$(curl https://kvdb.io/M8NTh9kT327fA6ombuZZS/migration_${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if [ "$SUCCESS" == "success" ];
            then
              echo "------------------ Confirm to revert -------------" 
              cd ~/project/backend
              npm install
              npm run migrations:revert
            else
              echo "--------------- No migrations to revert ----------"  
            fi
          when: << parameters.when >>

  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["40:da:c9:ae:be:4a:72:55:a1:f6:1f:92:87:0d:25:ae"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible 
            pwd &&
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Save all db varibles in env file
          command: |
            cd backend
            touch .env
            echo NODE_ENV=local >> .env
            echo TYPEORM_HOST=database-2.cicvv8ubmjyc.us-east-1.rds.amazonaws.com >> .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_DATABASE=postgres >> .env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> .env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> .env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> .env
            echo TYPEORM_PASSWORD=password >> .env
            echo TYPEORM_PORT=5432 >> .env
            TYPEORM_USERNAME=postgres >> .env
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir --parents /home/circleci/source
            cp artifact.tar.gz /home/circleci/source/
            cd /home/circleci/source/
            ls -la
      - persist_to_workspace:
          root: .
          paths:
            - artifact.tar.gz
            - .circleci/ansible/inventory.txt
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt

            cd .circleci/ansible/
            ls -la
            cat inventory.txt
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - run:
          name: install gzip
          command: |
            yum install tar -y
            yum install gzip -y
      - destroy-environment:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
          
  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["40:da:c9:ae:be:4a:72:55:a1:f6:1f:92:87:0d:25:ae"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible 
            pwd &&
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only:
                - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]